generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ShoppingListItem {
  quantity       String?
  name           String
  id             String        @id @unique @default(dbgenerated()) @map("_id") @db.ObjectId
  shoppingList   ShoppingList? @relation(fields: [shoppingListId], references: [id])
  shoppingListId String?       @unique @db.ObjectId
}

model ShoppingList {
  title     String
  id        String             @id @unique @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt DateTime           @default(now()) @map(name: "created_at")
  recipes   Recipe[]           @relation(fields: [recipeIds], references: [id])
  recipeIds String[]           @unique @db.ObjectId
  items     ShoppingListItem[]
  author    User?              @relation(fields: [authorId], references: [id])
  authorId  String?            @db.ObjectId
}

model Ingredient {
  quantity String?
  name     String
  id       String  @id @unique @default(dbgenerated()) @map("_id") @db.ObjectId
  Recipe   Recipe  @relation(fields: [recipeId], references: [id])
  recipeId String  @unique @db.ObjectId
}

model Recipe {
  id                  String         @id @unique @default(dbgenerated()) @map("_id") @db.ObjectId
  title               String
  description         String
  imageSrc            String
  rating              String
  ratings             String
  time                String
  amountOfIngredients String
  difficulty          String
  createdAt           DateTime       @default(now()) @map(name: "created_at")
  ingredients         Ingredient[]
  categories          String[]
  url                 String         @unique
  shoppingList        ShoppingList[]
  steps               String[]
}

model Account {
  id                 String    @id @unique @default(dbgenerated()) @map("_id") @db.ObjectId
  compoundId         String    @unique @map(name: "compound_id")
  userId             String    @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           String   @id @unique @default(dbgenerated()) @map("_id") @db.ObjectId
  userId       String   @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            String         @id @unique @default(dbgenerated()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map(name: "email_verified")
  image         String?
  createdAt     DateTime       @default(now()) @map(name: "created_at")
  updatedAt     DateTime       @default(now()) @map(name: "updated_at")
  shoppingLists ShoppingList[]

  @@map(name: "users")
}

model VerificationRequest {
  id         String   @id @unique @default(dbgenerated()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}
